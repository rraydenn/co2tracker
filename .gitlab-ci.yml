image: node:23-alpine

stages:
  - setup
  - sonarqube-check
  - build
  - deploy

variables:
  DEPLOY_PATH: "/var/www/"
  DEPLOY_USER: "gitlabci"
  HOST: "192.168.75.18"

##########################
# Setup (install deps)
##########################
setup-deps:
  stage: setup
  script:
    - echo "Installing dependencies for API and frontend..."
    - npm install --prefix api
    - npm install --prefix frontend
  artifacts:
    paths:
      - api/node_modules/
      - frontend/node_modules/
    expire_in: 30 min


##########################
# Test API + Coverage
##########################
test_api:
  stage: build
  needs: [setup-deps]
  script:
    - echo "Injecting test env config"
    - cd ./api
    - echo "$ENV_API_TEST_CONFIG" > .env.test
    # Compile le projet avant les tests
    - npm run build
    - node ace test
  artifacts:
    paths:
      - api/coverage/
    expire_in: 1 hour
  only:
    - main
    - develop
    


##########################
# SonarQube Analysis
##########################
sonarqube-check:
  stage: sonarqube-check
  image:
    name: sonarsource/sonar-scanner-cli:5.0
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  script:
    - sonar-scanner
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  dependencies:
    - setup-deps
  allow_failure: true
  only:
    - merge_requests
    - main
    - develop

######################
# Build API (AdonisJS)
######################
build_api:
  stage: build
  needs: [setup-deps]
  only:
    - main
  script:
    - echo "Injecting API env config"
    - cd ./api
    - echo "$ENV_API_PROD_CONFIG" > .env.production
    - echo "Installing API dependencies"
    - npm install
    - npm run build
  artifacts:
    paths:
      - api/build/
    expire_in: 1 hour

########################
# Build Front (Vite/Vue)
########################
build_frontend:
  stage: build
  needs: [setup-deps]
  only:
    - main
  script:
    - echo "Injecting frontend env config"
    - cd ./frontend
    - echo "$ENV_FRONT_PROD_CONFIG" > .env.production
    - echo "Installing frontend dependencies"
    - npm install
    - npm run build
  artifacts:
    paths:
      - frontend/dist/
    expire_in: 1 hour

######################
# Deploy API to server
######################
deploy_api:
  stage: deploy
  needs: [build_api]
  only:
    - main
  before_script:
    - apk add --no-cache openssh
    - chmod 400 $CI_SSH_KEY
  script:
    - echo "Deploying API to $HOST..."
    - scp -r -o StrictHostKeyChecking=no -i $CI_SSH_KEY ./api/build $DEPLOY_USER@$HOST:$DEPLOY_PATH/
    - ssh -o StrictHostKeyChecking=no -i $CI_SSH_KEY $DEPLOY_USER@$HOST "
      cd $DEPLOY_PATH/build &&
      npm ci --omit=dev &&
      node ace migration:fresh &&
      cd .. &&
      pm2 restart ecosystem.config.js || pm2 start ecosystem.config.js"

###########################
# Deploy Front to server
###########################
deploy_frontend:
  stage: deploy
  needs: [build_frontend]
  only:
    - main
  before_script:
    - apk add --no-cache openssh
    - chmod 400 $CI_SSH_KEY
  script:
    - echo "Deploying Frontend to $HOST..."
    - scp -r -o StrictHostKeyChecking=no -i $CI_SSH_KEY ./frontend/dist $DEPLOY_USER@$HOST:$DEPLOY_PATH/
